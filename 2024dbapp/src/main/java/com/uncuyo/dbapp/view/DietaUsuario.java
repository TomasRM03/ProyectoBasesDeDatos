
package com.uncuyo.dbapp.view;

import com.uncuyo.dbapp.model.Usuario;
import com.uncuyo.dbapp.model.Realizadieta;
import java.sql.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author tomas
 */
public class DietaUsuario extends javax.swing.JFrame {

    /**
     * Creates new form DietaUsuario
     */
    public DietaUsuario() {
        initComponents();
        iniciarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDietaUsuario = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        Cerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblDietaUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblDietaUsuario);

        jLabel1.setText("Dietas y Usuarios");

        Cerrar.setText("Cerrar");
        Cerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CerrarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Cerrar)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(Cerrar)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CerrarMouseClicked
        this.dispose();
    }//GEN-LAST:event_CerrarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DietaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DietaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DietaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DietaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DietaUsuario().setVisible(true);
            }
        });
    }
    
    private void iniciarComponentes() {
        EntityManager em = emf.createEntityManager();
        List<Realizadieta> dietas  = null;
        try{
        dietas = (List<Realizadieta>) em.createQuery("From Realizadieta").getResultList();        
        }catch(Exception e){
            e.printStackTrace();
        }
        em.close();
        
        RealizaDietaTableModel realizadietaModel = new RealizaDietaTableModel(dietas);
        tblDietaUsuario.setModel(realizadietaModel);
        
    }
    
    private static final EntityManagerFactory emf = Persistence.createEntityManagerFactory("Persistencia");  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cerrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDietaUsuario;
    // End of variables declaration//GEN-END:variables
}

class RealizaDietaTableModel extends AbstractTableModel {
    private List<Realizadieta> realizadietas;
    private final String[] columnNames = {"Cuil", "Fecha_Inicio", "Dieta"};
    private Long idClicked=-1L;

    public RealizaDietaTableModel(List<Realizadieta> realizadietas) {
        this.realizadietas = realizadietas;
    }

    @Override
    public int getRowCount() {
        return realizadietas.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Realizadieta dietas = realizadietas.get(rowIndex);
        switch (columnIndex) {
            case 0: return dietas.getCuil();
            case 1: return dietas.getFechainicio();
            case 2: return dietas.getNrodieta();
            default: return null;
        }
    }

    @Override
    public String getColumnName(int column) {
        return columnNames[column];
    }

    @Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return false; // Permite la edici√≥n en todas las celdas
    }

    @Override
    public void setValueAt(Object value, int rowIndex, int columnIndex) {
        Realizadieta dieta = realizadietas.get(rowIndex);
        switch (columnIndex) {
            case 0:
                dieta.setCuil((Long) value);
                break;
            case 1:
                dieta.setFechainicio((Date) value);
                break;
            case 2:
                dieta.setNrodieta((Integer) value);
                break;
        }
        fireTableCellUpdated(rowIndex, columnIndex);
    }

    public void addRealizadietas(Realizadieta dieta) {
        realizadietas.add(dieta);
        fireTableRowsInserted(realizadietas.size() - 1, realizadietas.size() - 1);
    }

    public void removeRealizadietas(int rowIndex) {
        realizadietas.remove(rowIndex);
        fireTableRowsDeleted(rowIndex, rowIndex);
    }

    public void updateRealizadietas(int rowIndex, Realizadieta dieta) {
        realizadietas.set(rowIndex, dieta);
        fireTableRowsUpdated(rowIndex, rowIndex);
    }
}